name: Deploy Databricks Job
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    env:
      DATABRICKS_AUTH_TYPE: github-oidc
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_CLIENT_ID: ${{ vars.DATABRICKS_CLIENT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main

      - name: Run Databricks CLI commands
        run: databricks current-user me

      # - name: Deploy Notebook
      #   env:
      #     DATABRICKS_AUTH_TYPE: github-oidc
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      #     DATABRICKS_CLIENT_ID: ${{ vars.DATABRICKS_CLIENT_ID }}
      #     # Uncomment if your workspace host is required
      #     # DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      #   run: |
      #     TARGET_FOLDER="/Workspace/Users/aditya.pradana@databricks.com/my-demo-notebooks/02-data-engineering/github-action-jobs"
      #     NOTEBOOK_FILE="gh-job-simple-task.ipynb"
      #     databricks workspace import \
      #     $TARGET_FOLDER/$NOTEBOOK_FILE \
      #     --file $NOTEBOOK_FILE \
      #     --format JUPYTER \
      #     --overwrite
      
      # - name: Deploy Jobs
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      #     # Uncomment if your workspace host is required
      #     # DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      #   run: |
      #     JOB_NAME="my-github-action-job"
      #     JOB_JSON="jobs-definition.json"

      #     # 1. List all jobs in JSON format
      #     jobs_json=$(databricks jobs list --name $JOB_NAME --output json)

      #     # 2. Find if a job with the desired name exists, extract its job_id (using jq)
      #     job_id=$(echo "$jobs_json" | jq -r '.[0].job_id')

      #     if [[ -n "$job_id" && "$job_id" != "null" ]]; then
      #       echo "Job already exists (ID: $job_id), do nothing..."
      #       # 3. Update the existing job
      #       # databricks jobs update "$job_id" --json @"$JOB_JSON"
      #     else
      #       echo "Job does not exist, creating..."
      #       # 4. Create new job
      #       databricks jobs create --json @"$JOB_JSON"
      #     fi
      
      # - name: Run Jobs
      #   env:
      #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      #     # Uncomment if your workspace host is required
      #     # DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      #   run: |
      #     JOB_NAME="my-github-action-job"
      #     JOB_JSON="jobs-definition.json"

      #     jobs_json=$(databricks jobs list --name $JOB_NAME --output json)
      #     job_id=$(echo "$jobs_json" | jq -r '.[0].job_id')

      #     databricks jobs run-now $job_id --no-wait